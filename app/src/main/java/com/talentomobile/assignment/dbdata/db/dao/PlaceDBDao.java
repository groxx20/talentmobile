package com.talentomobile.assignment.dbdata.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.talentomobile.assignment.dbdata.db.PlaceDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLACE_DB".
*/
public class PlaceDBDao extends AbstractDao<PlaceDB, Long> {

    public static final String TABLENAME = "PLACE_DB";

    /**
     * Properties of entity PlaceDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property East = new Property(2, Double.class, "east", false, "EAST");
        public final static Property South = new Property(3, Double.class, "south", false, "SOUTH");
        public final static Property North = new Property(4, Double.class, "north", false, "NORTH");
        public final static Property West = new Property(5, Double.class, "west", false, "WEST");
        public final static Property Lat = new Property(6, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(7, Double.class, "lng", false, "LNG");
        public final static Property CountryCode = new Property(8, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property Population = new Property(9, Integer.class, "population", false, "POPULATION");
    }


    public PlaceDBDao(DaoConfig config) {
        super(config);
    }
    
    public PlaceDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLACE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"EAST\" REAL," + // 2: east
                "\"SOUTH\" REAL," + // 3: south
                "\"NORTH\" REAL," + // 4: north
                "\"WEST\" REAL," + // 5: west
                "\"LAT\" REAL," + // 6: lat
                "\"LNG\" REAL," + // 7: lng
                "\"COUNTRY_CODE\" TEXT," + // 8: countryCode
                "\"POPULATION\" INTEGER);"); // 9: population
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlaceDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double east = entity.getEast();
        if (east != null) {
            stmt.bindDouble(3, east);
        }
 
        Double south = entity.getSouth();
        if (south != null) {
            stmt.bindDouble(4, south);
        }
 
        Double north = entity.getNorth();
        if (north != null) {
            stmt.bindDouble(5, north);
        }
 
        Double west = entity.getWest();
        if (west != null) {
            stmt.bindDouble(6, west);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(8, lng);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(9, countryCode);
        }
 
        Integer population = entity.getPopulation();
        if (population != null) {
            stmt.bindLong(10, population);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlaceDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double east = entity.getEast();
        if (east != null) {
            stmt.bindDouble(3, east);
        }
 
        Double south = entity.getSouth();
        if (south != null) {
            stmt.bindDouble(4, south);
        }
 
        Double north = entity.getNorth();
        if (north != null) {
            stmt.bindDouble(5, north);
        }
 
        Double west = entity.getWest();
        if (west != null) {
            stmt.bindDouble(6, west);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(8, lng);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(9, countryCode);
        }
 
        Integer population = entity.getPopulation();
        if (population != null) {
            stmt.bindLong(10, population);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlaceDB readEntity(Cursor cursor, int offset) {
        PlaceDB entity = new PlaceDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // east
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // south
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // north
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // west
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // lng
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // countryCode
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // population
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlaceDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEast(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setSouth(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setNorth(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setWest(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLng(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCountryCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPopulation(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlaceDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlaceDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlaceDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
